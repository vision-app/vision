#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const nodeURL = require('url');
const chalk = require('chalk');
const ora = require('ora');
const logger = require('../lib/logger');
const detect = require('detect-port');
const imagemin = require('imagemin');
const imageminMozjpeg = require('imagemin-mozjpeg');
const imageminPngquant = require('imagemin-pngquant');
const createServer = require('../lib/createServer');
const getPuppeteer = require('../lib/getPuppeteer');

const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
const cwd = process.cwd();
const DEFAULT_PORT = 9600;

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<url|local-file>')
    .description(`Take a screenshot of a web page.
For example:
  vusion screenshot https://www.example.com
  vusion screenshot public/index.html --code-example --package
  vusion screenshot --server public/index.html -o screenshots/0.png`)
    .option('-o, --output <output>', 'Output path')
    .option('-S, --server', 'Run a local server before screenshoting')
    .option('-W, --watch', 'Not stop local server after screenshoting. You can watch pages in a real browser')
    .option('-s, --selector <selector>', 'Select a element through CSS selector')
    .option('-c, --code-example [number]', 'Auto detect selector from code example. Batch mode if not specify example number')
    .option('-m, --max-count <height>', 'Max screenshots count in batch mode. Defaults to 6', parseInt, 6)
    .option('-d, --delay <delay>', 'Screenshot with a delay', parseInt)
    .option('-w, --width <width>', 'Viewport width', parseInt)
    .option('-h, --height <height>', 'Viewport height', parseInt)
    .option('--dsf <device-scale-factor>', 'Specify device scale factor (can be thought of as dpr). Defaults to 2', parseInt, 2)
    .option('--package [package-path]', 'Autoset package.json screenshots')
    .parse(process.argv);

/**
 * Take a screenshot with local server
 *
 * @param {string} options.serverPath Local server directory
 * @param {number} options.port Server port
 * @param {string} options.targetUrl The target url
 * @param {string} options.selector The target CSS selector
 * @param {number} options.elNumber Only screeenshot specify number element
 * @param {string} options.output Output path
 * @param {number} options.delay Screenshot with a delay
 * @param {{ width: number, height: number }} options.viewport Screenshot in a viewport
 */
async function screenshotWithLocalServer({ serverPath, port, url, selector, elNumber, maxCount, output, delay, viewport }) {
    if (url.startsWith('./'))
        url = url.slice(2);
    url = url ? `http://127.0.0.1:${port}/${url}` : `http://127.0.0.1:${port}/public/index.html`;

    const server = createServer(serverPath, port);
    console.info(chalk.white(`Create local server with port ${port}`));
    console.info(chalk.white(`The screenshot target url: ${url}`));

    await screenshot({ url, selector, elNumber, maxCount, output, delay, viewport });

    if (!program.watch)
        server.close();
}

/**
 * Take a screenshot of web page
 *
 * @param {string} options.url The target url
 * @param {string} options.selector The target CSS selector
 * @param {number} options.elNumber Only screeenshot specify number element
 * @param {string} options.output Output path
 * @param {number} options.delay Screenshot with a delay
 * @param {{ width: number, height: number }} options.viewport Screenshot in a viewport
 */
async function screenshot({ url, selector, elNumber, maxCount, output, delay, viewport }) {
    // a terminal spinner
    const spinner = ora('Screenshoting...').start();

    let pkg;
    let pkgPath;
    if (program.package) {
        pkgPath = typeof program.package === 'string' ? program.package : path.resolve(process.cwd(), 'package.json');
        pkg = require(pkgPath);
        if (!pkg.vusion)
            pkg.vusion = {};
        pkg.vusion.screenshots = [];
    }

    function writeIntoPackage(relativePath) {
        const unpkgHost = 'https://unpkg.com';
        const finalPath = `${unpkgHost}/${pkg.name}@${pkg.version}/${relativePath}`;
        // if (!screenshots.includes(finalPath))
        pkg.vusion.screenshots.push(finalPath);
    }

    try {
        const puppeteer = await getPuppeteer();
        // Start puppeteer
        const browser = await puppeteer.launch();
        // Create a new page
        const page = await browser.newPage();

        // Set page's viewport
        if (selector && elNumber !== undefined)
            viewport.height = 3000;
        page.setViewport(viewport);

        // Visit the target url
        await page.goto(url);

        if (delay) {
            await sleep(delay);
        }

        // Ensure output path
        const outputDir = path.dirname(output);
        if (!fs.existsSync(outputDir))
            fs.mkdirSync(outputDir, { recursive: true });

        // Screenshot a element through CSS selector;
        if (selector && elNumber === undefined) {
            const el = await page.$(selector);
            if (!el)
                throw Error(`Could not find element that matches selector: ${selector}.`);
            await el.screenshot({ path: output });
        } else if (selector && typeof elNumber === 'number') {
            const el = (await page.$$(selector))[elNumber];
            if (!el)
                throw Error(`Could not find element that matches selector: ${selector}.`);
            await el.screenshot({ path: output });
        } else if (selector && elNumber === true) {
            elNumber = 0;
            let el = (await page.$$(selector))[elNumber];
            /* eslint-disable no-await-in-loop */
            while (el && elNumber < maxCount) {
                output = path.join(output, '../' + elNumber + '.png');
                await el.screenshot({ path: output });

                // minify screenshot
                await minifyImg(output, outputDir);
                console.info(`       Output path: ${chalk.cyan(output)}`);
                pkg && writeIntoPackage(output);

                el = (await page.$$(selector))[++elNumber];
            }

            // close chromium
            await browser.close();
            spinner.stopAndPersist();
            console.info();
            logger.done('Screenshot success!');
            pkg && await fs.writeFile(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
            return;
        } else {
        // Screenshot full page
            await page.screenshot({ path: output });
        }

        // minify screenshot
        await minifyImg(output, outputDir);

        // close chromium
        await browser.close();

        spinner.stopAndPersist();
        console.info();
        logger.done('Screenshot success!');
        console.info(`       Output path: ${chalk.cyan(output)}`);
        pkg && writeIntoPackage(output);
        pkg && await fs.writeFile(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
    } catch (err) {
        spinner.stopAndPersist();
        console.info();
        logger.error('Screenshot fail!');

        // chromium not download error
        // stdout reinstall puppeteer tips.
        if (err.message === 'Chromium revision is not downloaded. Run "npm install" or "yarn install"') {
            console.info(chalk.red('\n\nPuppeteer Install fail. \nPlease install puppeteer using the following commands:'));
            console.info(chalk.white('\n  npm uninstall puppeteer -g'));
            console.info(chalk.white('\n  PUPPETEER_DOWNLOAD_HOST=https://storage.googleapis.com.cnpmjs.org npm i puppeteer -g --registry=https://registry.npm.taobao.org'));
            console.info(chalk.white('\n  screenshot -u http://www.example.com\n'));
        } else {
            console.error(err);
        }
        process.exit(1);
    }
}

/**
 * minify an image
 *
 * @param {string} imgPath
 * @param {string} outputDir Output dir
 * @returns
 */
function minifyImg(imgPath, outputDir) {
    return imagemin([imgPath], outputDir, {
        plugins: [imageminMozjpeg(), imageminPngquant()],
    });
}

async function run() {
    let { selector, delay } = program;
    const url = program.args[0];
    if (!url) {
        console.info(chalk.red('The url is required!'));
        program.help();
    }

    const local = !url.startsWith('http');
    const viewport = {
        width: program.width || 1180,
        height: program.height || 600,
        deviceScaleFactor: program.deviceScaleFactor || 2,
    };

    let elNumber;
    if (!selector && program.codeExample !== undefined) {
        selector = `[class^="u-code-example_demo_"]`;
        elNumber = isNaN(parseInt(program.codeExample)) ? true : parseInt(program.codeExample);
    }

    let output = program.output;
    if (!output) {
        if (elNumber !== undefined) {
            fs.ensureDirSync('screenshots');
            output = `screenshots/${elNumber}.png`;
        } else
            output = 'screenshot.png';
    }

    if (local) {
        if (program.server) {
            const port = await detect(DEFAULT_PORT);
            await screenshotWithLocalServer({ serverPath: cwd, port, url, selector, elNumber, maxCount: program.maxCount, output, delay, viewport });
        } else {
            await screenshot({ url: nodeURL.pathToFileURL(url), selector, elNumber, maxCount: program.maxCount, output, delay, viewport });
        }
    } else {
        await screenshot({ url, selector, elNumber, maxCount: program.maxCount, output, delay, viewport });
    }
}

run();
