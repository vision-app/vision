#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const vusion = require('vusion-api');
const chalk = require('chalk');
const chokidar = require('chokidar');

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<source> <target>')
    .description(`Sync files from one path to another. Support watch mode`)
    .option('-w, --watch', 'Watch files')
    .parse(process.argv);

let path1 = program.args[0];
let path2 = program.args[1];
// commander@2 的 bug
if (process.argv[3] === '-w' && process.argv.length === 5) {
    path1 = process.argv[4];
    path2 = process.argv[2];
}

if (!path1 || !path2) {
    vusion.cli.error('Must specify two paths!');
    process.exit(1);
}

if (!fs.existsSync(path1)) {
    vusion.cli.error(path1, 'Not Exists');
    process.exit(1);
}

let files1 = [];
let files2 = [];
const path1Stat = fs.statSync(path1).isDirectory();
const path2Stat = fs.statSync(path2).isDirectory();
if (!path1Stat) { // 文件比较
    if (path2Stat) {
        vusion.cli.error(`${chalk.white(path1)} is a file but ${chalk.white(path2)} is a directory`, 'Not Same Type');
        process.exit();
    }

    files1 = [path1];
    files2 = [path2];
} else { // 文件夹比较
    if (!fs.statSync(path2).isDirectory()) {
        vusion.cli.error(`${chalk.white(path1)} is a directory but ${chalk.white(path2)} is a file`, 'Not Same Type');
        process.exit();
    }

    files1 = vusion.fs.listAllFiles(path1, {
        type: 'file',
        patterns: ['!**/node_modules', '!**/.git'],
    });
    files2 = vusion.fs.listAllFiles(path2, {
        type: 'file',
        patterns: ['!**/node_modules', '!**/.git'],
    });
}

function getFile2(file1) {
    const relativePath = path.relative(path1, file1);
    return path.join(path2, relativePath);
}

files1.forEach((file1) => {
    const file2 = getFile2(file1);
    fs.ensureDirSync(path.dirname(file2));
    fs.copyFileSync(file1, file2);
});
vusion.cli.done(path2 + '/**', 'Copy');

if (program.watch) {
    // One-liner for current directory
    const watcher = chokidar.watch(path1, {
        ignoreInitial: true,
    });

    console.info('vusion-sync is watching the files...');
    watcher.on('all', (event, file1) => {
        if (file1.includes('node_modules/') || file1.includes('.git/'))
            return;

        const file2 = getFile2(file1);
        if (event === 'add' || event === 'change') {
            fs.ensureDirSync(path.dirname(file2));
            fs.copyFileSync(file1, file2);
            vusion.cli.done(file2, 'Copy');
        } else if (event === 'addDir') {
            try {
                fs.mkdirSync(file2);
                vusion.cli.done(file2, 'Mkdir');
            } catch (e) {
                console.error(e);
            }
        } else if (event === 'unlink') {
            try {
                fs.unlinkSync(file2);
                vusion.cli.done(file2, 'Remove');
            } catch (e) {
                console.error(e);
            }
        } else if (event === 'unlinkDir') {
            try {
                fs.unlinkSync(file2);
                vusion.cli.done(file2, 'Remove');
            } catch (e) {
                console.error(e);
            }
        }
    });
}
