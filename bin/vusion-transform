#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const vusion = require('vusion-api');
const cli = vusion.cli;
const inquirer = require('inquirer');
const chalk = require('chalk');
const execa = require('execa');

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<vue-path>')
    .description('Transform Vue file between singlefile and multifile pattern')
    .option('-f, --force', 'Force to transform')
    .option('-p, --package', 'Add package info')
    .option('-d, --decomposed', 'Transform decomposed')
    .option('--exports', 'Transform decomposed exports')
    .option('-t, --type <type>', 'to component or block', 'component')
    .parse(process.argv);

const vuePath = program.args[0];
if (!vuePath) {
    cli.error('No vue path given!');
    process.exit(1);
} else if (!vuePath.endsWith('.vue')) {
    cli.error('Please specify a vue path!');
    process.exit(1);
}

if (program.package && !(program.type === 'component' || program.type === 'block')) {
    cli.error(`Unsupported type ${program.type}!`);
    process.exit(1);
}

const fullPath = path.resolve(process.cwd(), vuePath);

async function run() {
    const vueFile = new vusion.VueFile(fullPath);
    await vueFile.preOpen();

    if (program.package) {
        // 检查多文件 -> 单文件时，是否需要判断强制转换
        const checkResult = vueFile.checkTransform();
        if (!program.force && vueFile.isDirectory && checkResult !== true) {
            const { ok } = await inquirer.prompt([{
                type: 'confirm',
                name: 'ok',
                default: false,
                message: `多文件中包含 ${chalk.cyan(String(checkResult.slice(0, 3)))} 等特殊功能文件，
  转换成 package 会重置这些内容。是否强制转换？`,
            }]);
            if (!ok)
                return;
        }

        await vueFile.open();
        console.info(`Now transform to vusion ${program.type} package. Please complete some additional info.`);
        await execa(require.resolve('create-vusion/bin/create-vusion'), [program.type, '--force', vueFile.fileName], {
            cwd: path.dirname(fullPath),
            stdio: 'inherit',
        });

        if (!vueFile.isDirectory)
            vueFile.transform();
        await vueFile.save();
    } else if (program.decomposed) {
        const vueFile = new vusion.VueFile(fullPath);
        await vueFile.open();

        await Promise.all(vueFile.children.map(async (child) => {
            await child.open();
            if (child.isDirectory && !child.isComposed) {
                child.transformExportStyle();
                const checkResult = child.checkTransform();
                if (checkResult !== true) {
                    return console.warn(child.fullPath, checkResult);
                } else {
                    child.transform();
                }
            }
            await child.save();
        }));

        vueFile.transformDecomposed();
        await vueFile.save();

        if (program.exports) {
            const indexPath = path.join(fullPath, 'index.js');
            if (fs.existsSync(indexPath))
                return;

            const content = [];
            content.push(`import ${vueFile.componentName} from './index.vue';`);
            vueFile.children.forEach((child) => content.push(`import ${child.componentName} from './${child.fileName}';`));
            content.push('');
            content.push('export {');
            content.push(`    ${vueFile.componentName},`);
            vueFile.children.forEach((child) => content.push(`    ${child.componentName},`));
            content.push('};');
            content.push('');
            content.push(`export default ${vueFile.componentName};`);

            fs.writeFileSync(indexPath, content.join('\n') + '\n');
        }
    } else {
        // 检查多文件 -> 单文件时，是否需要判断强制转换
        const checkResult = vueFile.checkTransform();
        if (!program.force && vueFile.isDirectory && checkResult !== true) {
            const { ok } = await inquirer.prompt([{
                type: 'confirm',
                name: 'ok',
                default: false,
                message: `多文件中包含 ${chalk.cyan(String(checkResult.slice(0, 3)))} 等特殊功能文件，
  转换成单文件会丢失这些内容。是否强制转换？`,
            }]);
            if (!ok)
                return;
        }

        await vueFile.open();
        vueFile.transform();
        await vueFile.save();

        cli.done(`${vueFile.fileName} 已成功由${vueFile.isDirectory ? '单文件 -转为-> 多文件' : '多文件 -转为-> 单文件'}！`);
    }
}

run();
