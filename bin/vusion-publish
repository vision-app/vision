#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const semver = require('semver');
const chalk = require('chalk');
const inquirer = require('inquirer');
const logger = require('../lib/logger');
const vusion = require('vusion-api');
const exec = require('../lib/exec');

const pkgPath = path.resolve(process.cwd(), 'package.json');
if (!fs.existsSync(pkgPath)) {
    console.error('[ERROR] Not a npm package');
    console.error('Please locate into a npm package directory.');
    process.exit(1);
}
const pkg = require(pkgPath);

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<version>')
    .option('-n, --npm <npm>', 'Use other npm to publish like cnpm', 'npm')
    .option('--tag <tag>', 'Registers the published package with the given tag')
    .option('--access <public|restricted>', 'Tells the registry whether this package should be published as public or restricted.')
    .parse(process.argv);

const name = pkg.name;
const version = semver.clean(program.args[0] || pkg.version);

async function publish() {
    const message = `The new version of ${chalk.yellow(name)} is ${chalk.yellow(version)}`;
    const { yes } = await inquirer.prompt([{
        name: 'yes',
        type: 'confirm',
        message: message + '\n' + '-'.repeat(message.length + 4 - 20)
+ `\nAre you sure to continue?`,
    }]);

    if (!yes)
        return;

    pkg.version = version;
    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n', 'utf-8');

    const npmCmds = [`${program.npm} publish`];
    if (program.tag)
        npmCmds.push(`--tag ${program.tag}`);
    if (program.access)
        npmCmds.push(`--access ${program.access}`);
    else if (pkg.name.includes('/'))
        npmCmds.push(`--access public`);

    const info = name.endsWith('.vue') ? `${name}@${version}` : `v${version}`;

    try {
        await exec('git add package.json');
        await exec(npmCmds.join(' ')); // prepublishOnly

        console.info();
        logger.done('Successfully published!');

        if (pkg.vusion && pkg.vusion.type === 'block') {
            await vusion.ms.publishBlock(Object.assign({}, pkg, {
                labels: pkg.keywords,
                title: pkg.vusion.title,
                category: pkg.vusion.category,
                access: pkg.vusion.access === 'public' ? 1 : 1,
                screenshots: pkg.vusion.screenshots.join(','),
                base: pkg.vusion.base || 'vue',
                ui: pkg.vusion.base || 'cloud-ui',
                registry: 'https://registry.npmjs.org',
                team: pkg.vusion.team,
                dependencies: JSON.stringify(pkg.dependencies),
            }));
            logger.done('Registered package on vusion platform.');
        }
    } catch (e) {
        console.info();
        logger.error('Failed to publish!');
        e && console.error(e.response.data);
        process.exit(1);
    }

    console.info();
    try {
        await exec('git', ['commit', '-m', `:bookmark: Publish ${info}`]);
    } catch (e) {}

    let pushAndTag = true;
    try {
        await exec(`git push`);
    } catch (e) {
        pushAndTag = false;
    }
    try {
        await exec(`git tag ${info}`);
        await exec(`git push origin ${info}`);
    } catch (e) {
        pushAndTag = false;
    }
    console.info();
    pushAndTag && logger.done(`Pushed git branch and tag ${info}!`);
}

publish();
