#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const semver = require('semver');
const chalk = require('chalk');
const inquirer = require('inquirer');
const logger = require('../lib/logger');
const vusion = require('vusion-api');
const exec = require('../lib/just-exec');

const pkgPath = path.resolve(process.cwd(), 'package.json');
if (!fs.existsSync(pkgPath)) {
    console.error('[ERROR] Not a npm package');
    console.error('Please locate into a npm package directory.');
    process.exit(1);
}
let pkg = require(pkgPath);

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<version>')
    .option('--tag <tag>', 'Registers the published package with the given tag')
    .option('--access <public|restricted>', 'Tells the registry whether this package should be published as public or restricted.')
    .option('--manager <manager>', 'Change publish manager. For example: --manager cnpm')
    .option('--registry <url>', 'Use custom registry if manager default registry is not you want. For example: --registry https://registry.npm.taobao.org')
    .option('--skip-npm', 'Skip npm publish. Useful when package published but error happened')
    .parse(process.argv);

const name = pkg.name;
const version = semver.clean(program.args[0] || pkg.version);
const config = vusion.rc.configurator.load();

const manager = program.manager || config.publish_manager;
const registry = program.registry || config.registries[config.publish_manager];

const ACCESS_MAP = {
    public: 1,
    private: 2,
    team: 3,
};

async function publish() {
    const message = `The new version of ${chalk.yellow(name)} is ${chalk.yellow(version)}`;
    const { yes } = await inquirer.prompt([{
        name: 'yes',
        type: 'confirm',
        message: message + '\n' + '-'.repeat(message.length + 4 - 20)
+ `\nAre you sure to continue?`,
    }]);

    if (!yes)
        return;

    pkg.version = version;

    const npmCmds = [`${/^win/.test(process.platform) ? manager + '.cmd' : manager} publish`];
    if (program.tag)
        npmCmds.push(`--tag ${program.tag}`);

    if (program.access)
        npmCmds.push(`--access ${program.access}`);
    else if (pkg.name.includes('/'))
        npmCmds.push(`--access public`);

    if (program.registry)
        npmCmds.push(`--registry ${registry}`);

    const info = name.endsWith('.vue') ? `${name}@${version}` : `v${version}`;

    let gitAddFailed = false;
    try {
        if (pkg.vusion && (pkg.vusion.type === 'component' || pkg.vusion.type === 'block' || pkg.vusion.type === 'template')) {
            await vusion.ms.getBlocks(); // 判断网络是否 OK

            if (pkg.vusion.type !== 'template') {
                // 兼容老版，以后私有库可能有用
                const isOnNOS = pkg.scripts.deploy && pkg.scripts.deploy.includes('vusion deploy');
                let staticBaseURL = isOnNOS ? 'http://static.vusion.163yun.com/packages' : 'https://unpkg.com';
                staticBaseURL += `/${pkg.name}@${pkg.version}`;
                // if (registry.starsWith('https://registry.npmjs.org'))
                pkg.homepage = isOnNOS ? `${staticBaseURL}/index.html` : `${staticBaseURL}/public/index.html`;
            }

            let repository = pkg.repository || '';
            //             if (!repository) {
            //                 console.warn('');
            //                 logger.warn('Information in package.json is not complete!');
            //                 console.warn(`Please set the repository. A string or an object. For example:
            // "repository": "vusion/cloud-ui-materials"
            // "repository": "https://github.com/vusion/cloud-ui-materials/tree/master/src/blocks/u-some-block.vue"
            // "repository": {
            //     "type": "git",
            //     "url": "https://github.com/vusion/cloud-ui-materials.git",
            //     "directory": "src/blocks/u-some-block.vue"
            // }
            //                 `);
            //                 process.exit(1);
            //             }
            if (typeof pkg.repository === 'object')
                repository = repository.url.replace(/\.git$/, '') + (pkg.repository.directory ? '/tree/master/' + pkg.repository.directory : '');
            else if (!pkg.repository.startsWith('http'))
                repository = 'https://github.com/' + pkg.repository;

            if (pkg.vusion.team) {
                const result = await vusion.ms.teamExist(pkg.vusion.team);
                if (!result) {
                    logger.error(`You are not in team '${pkg.vusion.team}'!`);
                    process.exit(1);
                }
            }

            await fs.writeFile(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
            try {
                await exec('git add package.json');
            } catch (e) {
                gitAddFailed = true;
            }

            !program.skipNpm && await exec(npmCmds.join(' ')); // prepublishOnly

            if (pkg.vusion.type === 'component' || pkg.vusion.type === 'block') {
                try {
                    // git add . 加在 npm 包中也不太好，不加也不好
                    if (!gitAddFailed)
                        await exec('git add .');
                } catch (e) {}
            }

            console.info();
            logger.done('Successfully published!');

            pkg = JSON.parse(await fs.readFile(pkgPath, 'utf8'));

            let publishFunc;
            if (pkg.vusion.type === 'component')
                publishFunc = vusion.ms.publishComponent;
            else if (pkg.vusion.type === 'block')
                publishFunc = vusion.ms.publishBlock;
            else if (pkg.vusion.type === 'template')
                publishFunc = vusion.ms.publishTemplate;

            await publishFunc(Object.assign({}, pkg, {
                // homepage,
                repository,
                labels: pkg.keywords && pkg.keywords.join(','),
                title: pkg.vusion.title || pkg.title,
                description: pkg.vusion.description || pkg.description,
                category: pkg.vusion.category,
                access: ACCESS_MAP[pkg.vusion.access],
                screenshots: pkg.vusion.screenshots && pkg.vusion.screenshots.slice(0, 12).join(','),
                base: pkg.vusion.base || 'vue',
                ui: pkg.vusion.ui || 'cloud-ui.vusion',
                registry,
                team: pkg.vusion.team,
                dependencies: JSON.stringify(pkg.dependencies),
            }));
            logger.done('Registered package on vusion platform.');
        } else { // 普通 publish
            await fs.writeFile(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
            try {
                await exec('git add package.json');
            } catch (e) {
                gitAddFailed = true;
            }
            !program.skipNpm && await exec(npmCmds.join(' ')); // prepublishOnly

            console.info();
            logger.done('Successfully published!');
        }
    } catch (e) {
        console.info();
        logger.error('Failed to publish!');
        e && console.error(e.response ? e.response.data : e);
        process.exit(1);
    }

    if (!gitAddFailed) {
        console.info();
        try {
            await exec('git', ['commit', '-m', `:bookmark: Publish ${info}`]);
        } catch (e) {}

        let pushAndTag = true;
        try {
            await exec(`git push`);
        } catch (e) {
            pushAndTag = false;
        }
        try {
            await exec(`git tag ${info}`);
            await exec(`git push origin ${info}`);
        } catch (e) {
            pushAndTag = false;
        }
        console.info();
        pushAndTag && logger.done(`Successfully pushed git branch and tag ${chalk.yellow(info)}`);
    }
}

publish();
