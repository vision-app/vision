#!/usr/bin/env node

const path = require('path');
const chalk = require('chalk');
const fs = require('fs-extra');
const vusion = require('vusion-api');
const inquirer = require('inquirer');
inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));
inquirer.registerPrompt('fuzzypath', require('inquirer-fuzzy-path'));
const fuzzy = require('fuzzy');
const ora = require('ora');
const logger = require('../lib/logger');

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<type> [source] [target]')
    .description(`Add a kind of material: ${chalk.yellow('block')}`) // or ${chalk.yellow('page')}`)
    .option('--name <rename>', 'Rename material in target path')
    .option('--title <title>', 'Set title to replace material content')
    .option('-q, --quickly', 'Skip questions and execute command quickly');

const oldOutputHelp = program.outputHelp;
program.outputHelp = function (cb) {
    oldOutputHelp.call(program, (text) => {
        const colored = text
            .replace(/^Usage: (.+)\n/mg, (m, $1) => 'Usage: ' + chalk.cyan($1) + '\n');
            // .replace(/^ {2}(\w+)/mg, (m, $1) => '  ' + chalk.yellow($1));
        const more = `\nFor examples:
  vusion add block
  vusion add block @cloud-ui/s-basic-form.vue ./src/some/path/create.vue
`;
        //   vusion add module
        //   vusion add module ./templates/module2 ./src/views/dashboard
        //   vusion add page
        const result = colored + more;
        return cb ? cb(result) : result;
    });
};

program.parse(process.argv);

const configurator = vusion.rc.configurator;
const config = configurator.load();
/**
 * Execute Command
 */
async function add(args) {
    let materialType = program.args[0];
    if (!materialType) {
        const { type } = await inquirer.prompt([{
            name: 'type',
            type: 'list',
            message: 'Which kind of material do you want to add?',
            default: 'block',
            choices: ['block', 'module'], // , 'page'],
        }]);

        materialType = type;
    }

    if (materialType === 'module') {
        const options = {
            source: program.args[1],
            target: program.args[2],
            name: program.rename,
            title: program.title,
        };

        // Ask questions
        if (!program.quickly) {
            if (!options.source) {
                const { source } = await inquirer.prompt([{
                    name: 'source',
                    type: 'input',
                    message: 'Please specify a module template path. Default is',
                    default: './templates/module',
                }]);
                options.source = source;
            }

            if (!options.target) {
                const { target } = await inquirer.prompt([{
                    name: 'target',
                    type: 'input',
                    message: 'Please specify target path. Default is',
                    default: './src/views/dashboard',
                }]);
                options.target = target;
            }

            if (!options.name) {
                const { name } = await inquirer.prompt([{
                    name: 'name',
                    type: 'input',
                    message: 'Please input module name. Default is',
                    default: 'module1',
                }]);
                options.name = name;
            }

            if (!options.title) {
                const { title } = await inquirer.prompt([{
                    name: 'title',
                    type: 'input',
                    message: 'Please input module title. Default is',
                    default: '模块1',
                }]);
                options.title = title;
            }
        }

        console.info();
        console.info(`✨ Adding module...`);
        const spinner = ora(`This might take a while...`).start();
        try {
            await vusion.ms.addModule(options);
            spinner.stop();
            console.info();
            logger.done(`Successfully added module ${chalk.yellow(options.name + ' (' + options.title + ')')}.`);
        } catch (e) {
            spinner.stop();
            console.error();
            logger.error(e);
            process.exit(1);
        }
    } else if (materialType === 'block') {
        const options = {
            source: program.args[1],
            target: program.args[2],
            name: program.rename,
        };

        // Ask questions
        if (!program.quickly) {
            if (!options.source) {
                const sourceType = config.download_registry;

                // if (!sourceType) {
                //     const sourceResult = await inquirer.prompt([{
                //         name: 'sourceType',
                //         type: 'list',
                //         message: `Select a source registry ${chalk.gray('(输入中英文均可搜索)')}:`,
                //         default: config.download_registry,
                //         choices: Object.keys(config.registries).map((key) => ({
                //             name: key + ' ' + chalk.gray(`(${config.registries[key]})`),
                //             value: key,
                //         })),
                //     }]);
                //     sourceType = sourceResult.sourceType;
                // }

                // if (registry.endsWith('npm')) {
                const spinner = ora('Loading blocks...').start();
                let blocks = await vusion.ms.getBlocks();
                blocks = blocks.map((block) => {
                    let name = block.name + ' ' + chalk.yellow(`(${block.title})`);
                    if (block.description && block.description !== block.title)
                        name += chalk.gray(` - ${block.description}`);
                    return {
                        name,
                        value: block.name,
                        short: block.name + ' ' + chalk.yellow(`(${block.title})`),
                    };
                });
                spinner.stop();

                const { block } = await inquirer.prompt([{
                    name: 'block',
                    type: 'autocomplete',
                    message: `Select a block:`,
                    source(answersSoFar, input) {
                        if (!input)
                            return Promise.resolve(blocks);
                        else {
                            return Promise.resolve(fuzzy.filter(input, blocks, {
                                extract(item) { return item.name; },
                            }).map((item) => blocks[item.index]));
                        }
                    },
                }]);

                options.source = {
                    type: sourceType,
                    registry: config.registries[sourceType],
                    name: block,
                };
            } else {
                options.source = {
                    type: config.download_registry,
                    registry: config.registries[config.download_registry],
                    name: options.source,
                };
            }

            const fileName = options.source.fileName = path.basename(options.source.name);
            options.source.baseName = path.basename(fileName, path.extname(fileName));

            if (!options.target) {
                const fileList = vusion.fs.listAllFiles('', {
                    patterns: ['!**/node_modules'],
                    includes: /\.vue$/,
                }).sort();
                const { target } = await inquirer.prompt([{
                    name: 'target',
                    type: 'autocomplete',
                    // type: 'fuzzypath', // 这个不太好用
                    message: `Select a target vue file to add block:`,
                    source(answersSoFar, input) {
                        if (!input)
                            return Promise.resolve(fileList);
                        else {
                            return Promise.resolve(fuzzy.filter(input, fileList, {
                                // pre: style.green.open,
                                // post: style.green.close,
                            }).map((item) => item.string));
                            //  ({
                            //     name: item.string,
                            //     value: item.original,
                            //     short: item.original,
                            // })));
                        }
                    },
                }]);

                options.target = target;
            }

            if (!options.name) {
                // const name = options.source.baseName;
                // console.log(opt)
                const dest = vusion.utils.avoidSameName(path.resolve(options.target, 'blocks', options.source.fileName));

                const { name } = await inquirer.prompt([{
                    name: 'name',
                    type: 'input',
                    message: `Do you want to rename component? Default is`,
                    default: path.basename(dest, '.vue'),
                    filter(componentName) {
                        let baseName = componentName.replace(/\.vue$/, '');
                        if (componentName.includes('-'))
                            componentName = vusion.utils.kebab2Camel(baseName);
                        else
                            baseName = vusion.utils.Camel2kebab(componentName);
                        return baseName;
                    },
                }]);
                options.name = name;
            }

            console.info();
            console.info(`The target vue file may be changed in the process. Make sure it saved in your editor.`);
            const { ok } = await inquirer.prompt([{
                name: 'ok',
                type: 'confirm',
                message: `Confirm to continue?`,
            }]);

            if (ok) {
                console.info();
                console.info(`✨ Adding block...`); // ${chalk.green(options.source.name)} in ${chalk.green(options.target)}`);
                const spinner = ora(`This might take a while...`).start();
                try {
                    await vusion.ms.addBlock(options);
                    spinner.stop();
                    console.info();
                    logger.done(`Successfully added block ${chalk.yellow(options.source.name)}.`);
                } catch (e) {
                    spinner.stop();
                    console.error();
                    if (e.response.data.error === '[not_found] document not found')
                        logger.error(`Block ${chalk.cyan(options.source.name)} not found in ${chalk.cyan(options.source.registry)}`);
                    else
                        logger.error(e.response.data);
                    process.exit(1);
                }
            }
        }
    }
    // if (materialType !== 'component' && materialType !== 'block')
    //     throw new Error('Unsupport material type!');

    // const materialName = program.args[1] || 'u-sample';

    // vusion.fs.createMultiFilePackage(path.join(process.cwd(), 'src', materialType + 's'), materialName).then((dest) => {
    //     console.info('Success! You can run serveral commands:');
    //     console.info('Start the development server:');
    //     console.info('    cd ' + path.relative(process.cwd(), dest));
    //     console.info('    npm install');
    //     console.info('    npm run doc');
    // });
}

add();
