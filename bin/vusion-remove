#!/usr/bin/env node

const path = require('path');
const chalk = require('chalk');
const { fs: vfs, ms: vms } = require('vusion-api');
const inquirer = require('inquirer');
inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));
inquirer.registerPrompt('fuzzypath', require('inquirer-fuzzy-path'));
const fuzzy = require('fuzzy');
const ora = require('ora');
const logger = require('../lib/logger');

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<type> [path]')
    .description(`Remove a material: ${chalk.yellow('block')}`) // , ${chalk.yellow('module')}`) // or ${chalk.yellow('page')}`)
    .option('--name <rename>', 'Rename material in target path')
    .option('--title <title>', 'Set title to replace material content')
    .option('-q, --quickly', 'Skip questions and execute command quickly');

const oldOutputHelp = program.outputHelp;
program.outputHelp = function (cb) {
    oldOutputHelp.call(program, (text) => {
        const colored = text
            .replace(/^Usage: (.+)\n/mg, (m, $1) => 'Usage: ' + chalk.cyan($1) + '\n');
            // .replace(/^ {2}(\w+)/mg, (m, $1) => '  ' + chalk.yellow($1));
        const more = `\nFor examples:
  vusion remove block
  vusion remove block ./src/something/create.vue/blocks/s-basic-form.vue
`;
        //   vusion remove module
        //   vusion remove module ./src/views/dashboard/nvm
        const result = colored + more;
        return cb ? cb(result) : result;
    });
};

program.parse(process.argv);
/**
 * Execute Command
 */
async function remove(args) {
    let materialType = program.args[0];
    if (!materialType) {
        const { type } = await inquirer.prompt([{
            name: 'type',
            type: 'list',
            message: 'Which kind of material do you want to remove?',
            default: 'block',
            choices: ['block', 'module'], // , 'page'],
        }]);

        materialType = type;
    }

    if (materialType === 'module') {
        const options = {
            target: program.args[1],
            name: program.rename,
        };

        // if (!options.target) {
        //     const { target } = await inquirer.prompt([{
        //         name: 'target',
        //         type: 'input',
        //         message: 'Please specify target path. Default is',
        //         default: './src/views/dashboard',
        //     }]);
        //     options.target = target;
        // }

        if (!options.name) {
            const { name } = await inquirer.prompt([{
                name: 'name',
                type: 'input',
                message: 'Please input module name:',
            }]);
            options.name = name;
        }

        if (!options.target || !options.name)
            return;
        const { ok } = await inquirer.prompt([{
            name: 'ok',
            type: 'confirm',
            message: `Are you sure to remove ${options.name}?`,
            default: false,
        }]);
        if (!ok)
            return;

        console.info();
        const spinner = ora(`ðŸ”¥ Removing module...`).start();
        try {
            await vms.removeModule(options);
            spinner.stopAndPersist();
            console.info();
            logger.done(`Successfully removed module ${chalk.yellow(options.name)}.`);
        } catch (e) {
            spinner.stopAndPersist();
            console.error();
            logger.error(e);
            process.exit(1);
        }
    }
}
// if (materialType !== 'component' && materialType !== 'block')
//     throw new Error('Unsupport material type!');

// const materialName = program.args[1] || 'u-sample';

// vfs.createMultiFilePackage(path.join(process.cwd(), 'src', materialType + 's'), materialName).then((dest) => {
//     console.info('Success! You can run serveral commands:');
//     console.info('Start the development server:');
//     console.info('    cd ' + path.relative(process.cwd(), dest));
//     console.info('    npm install');
//     console.info('    npm run doc');
// });

remove();
